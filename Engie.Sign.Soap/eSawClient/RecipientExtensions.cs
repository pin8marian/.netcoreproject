// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Recipient.
    /// </summary>
    public static partial class RecipientExtensions
    {
            /// <summary>
            /// Replaces a recipient in an envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='recipientId'>
            /// The id of an recipient in the bulk or envelope.
            /// </param>
            /// <param name='recipient'>
            /// The new recipient data.
            /// </param>
            public static object Replace(this IRecipient operations, string envelopeId, string recipientId, FlowApiSendEnvelopeRecipient recipient)
            {
                return Task.Factory.StartNew(s => ((IRecipient)s).ReplaceAsync(envelopeId, recipientId, recipient), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces a recipient in an envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='recipientId'>
            /// The id of an recipient in the bulk or envelope.
            /// </param>
            /// <param name='recipient'>
            /// The new recipient data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReplaceAsync(this IRecipient operations, string envelopeId, string recipientId, FlowApiSendEnvelopeRecipient recipient, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceWithHttpMessagesAsync(envelopeId, recipientId, recipient, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a recipient from an envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='recipientId'>
            /// The id of an recipient in the bulk or envelope.
            /// </param>
            public static object DeleteRecipient(this IRecipient operations, string envelopeId, string recipientId)
            {
                return Task.Factory.StartNew(s => ((IRecipient)s).DeleteRecipientAsync(envelopeId, recipientId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a recipient from an envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='recipientId'>
            /// The id of an recipient in the bulk or envelope.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRecipientAsync(this IRecipient operations, string envelopeId, string recipientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRecipientWithHttpMessagesAsync(envelopeId, recipientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
