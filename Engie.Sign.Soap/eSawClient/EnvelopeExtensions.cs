// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Envelope.
    /// </summary>
    public static partial class EnvelopeExtensions
    {
            /// <summary>
            /// Creates a draft with the given information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='draftCreateModel'>
            /// Draft creation model.
            /// </param>
            public static object Create(this IEnvelope operations, DraftCreateModel draftCreateModel)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).CreateAsync(draftCreateModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a draft with the given information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='draftCreateModel'>
            /// Draft creation model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this IEnvelope operations, DraftCreateModel draftCreateModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(draftCreateModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a draft from an existing template.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFromTemplateModel'>
            /// </param>
            public static object CreateFromTemplate(this IEnvelope operations, DraftCreateFromTemplateModel createFromTemplateModel)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).CreateFromTemplateAsync(createFromTemplateModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a draft from an existing template.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createFromTemplateModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateFromTemplateAsync(this IEnvelope operations, DraftCreateFromTemplateModel createFromTemplateModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFromTemplateWithHttpMessagesAsync(createFromTemplateModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel an envelope with the given envelope id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            public static object Cancel(this IEnvelope operations, string envelopeId)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).CancelAsync(envelopeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel an envelope with the given envelope id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelAsync(this IEnvelope operations, string envelopeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(envelopeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an envelope for the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            public static object ById(this IEnvelope operations, string envelopeId)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).ByIdAsync(envelopeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an envelope for the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ByIdAsync(this IEnvelope operations, string envelopeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ByIdWithHttpMessagesAsync(envelopeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an envelope with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            public static object Delete(this IEnvelope operations, string envelopeId)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).DeleteAsync(envelopeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an envelope with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IEnvelope operations, string envelopeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(envelopeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the found envelopes for the given descriptor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='descriptor'>
            /// The find descriptor.
            /// </param>
            public static object Find(this IEnvelope operations, FlowApiFindEnvelopesDescriptor descriptor)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).FindAsync(descriptor), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the found envelopes for the given descriptor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='descriptor'>
            /// The find descriptor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindAsync(this IEnvelope operations, FlowApiFindEnvelopesDescriptor descriptor, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindWithHttpMessagesAsync(descriptor, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a pdf document for the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentId'>
            /// The id of the document you want to download.
            /// </param>
            public static object DownloadCompletedDocument(this IEnvelope operations, string documentId)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).DownloadCompletedDocumentAsync(documentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a pdf document for the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentId'>
            /// The id of the document you want to download.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DownloadCompletedDocumentAsync(this IEnvelope operations, string documentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DownloadCompletedDocumentWithHttpMessagesAsync(documentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a png image for the given page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id for the envelope. NO Bulk id.
            /// </param>
            /// <param name='docRefNumber'>
            /// The document number (starting with 1)
            /// </param>
            /// <param name='pageNumber'>
            /// The page number (starting with 1)
            /// </param>
            public static object DownloadPageImage(this IEnvelope operations, string envelopeId, string docRefNumber, string pageNumber)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).DownloadPageImageAsync(envelopeId, docRefNumber, pageNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a png image for the given page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id for the envelope. NO Bulk id.
            /// </param>
            /// <param name='docRefNumber'>
            /// The document number (starting with 1)
            /// </param>
            /// <param name='pageNumber'>
            /// The page number (starting with 1)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DownloadPageImageAsync(this IEnvelope operations, string envelopeId, string docRefNumber, string pageNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DownloadPageImageWithHttpMessagesAsync(envelopeId, docRefNumber, pageNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Parses the provided files for markup fields and sig string and returns the
            /// containing elements.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='prepareModel'>
            /// </param>
            public static object Prepare(this IEnvelope operations, EnvelopePrepareModel prepareModel)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).PrepareAsync(prepareModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Parses the provided files for markup fields and sig string and returns the
            /// containing elements.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='prepareModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PrepareAsync(this IEnvelope operations, EnvelopePrepareModel prepareModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PrepareWithHttpMessagesAsync(prepareModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the envelope with the given id and sets the expiration days.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='expirationInDays'>
            /// The number of days until the restarted envelope expires again.
            /// </param>
            public static object Restart(this IEnvelope operations, string envelopeId, int expirationInDays)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).RestartAsync(envelopeId, expirationInDays), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the envelope with the given id and sets the expiration days.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='expirationInDays'>
            /// The number of days until the restarted envelope expires again.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartAsync(this IEnvelope operations, string envelopeId, int expirationInDays, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartWithHttpMessagesAsync(envelopeId, expirationInDays, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates and directly sends a new envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sendModel'>
            /// </param>
            public static object Send(this IEnvelope operations, EnvelopeSendModel sendModel)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).SendAsync(sendModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates and directly sends a new envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sendModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendAsync(this IEnvelope operations, EnvelopeSendModel sendModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendWithHttpMessagesAsync(sendModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an envelope from a existing template and directly sends it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sendFromTemplateModel'>
            /// </param>
            public static object SendFromTemplate(this IEnvelope operations, EnvelopeSendFromTemplateModel sendFromTemplateModel)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).SendFromTemplateAsync(sendFromTemplateModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an envelope from a existing template and directly sends it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sendFromTemplateModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendFromTemplateAsync(this IEnvelope operations, EnvelopeSendFromTemplateModel sendFromTemplateModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendFromTemplateWithHttpMessagesAsync(sendFromTemplateModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a reminder email to the recipient which action is awaited for the
            /// provided envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            public static object Remind(this IEnvelope operations, string envelopeId)
            {
                return Task.Factory.StartNew(s => ((IEnvelope)s).RemindAsync(envelopeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a reminder email to the recipient which action is awaited for the
            /// provided envelope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='envelopeId'>
            /// The id of the envelope/bulk.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemindAsync(this IEnvelope operations, string envelopeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemindWithHttpMessagesAsync(envelopeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
