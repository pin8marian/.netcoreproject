// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Description of a recipient.
    /// </summary>
    public partial class FlowApiSendEnvelopeRecipient
    {
        /// <summary>
        /// Initializes a new instance of the FlowApiSendEnvelopeRecipient
        /// class.
        /// </summary>
        public FlowApiSendEnvelopeRecipient() { }

        /// <summary>
        /// Initializes a new instance of the FlowApiSendEnvelopeRecipient
        /// class.
        /// </summary>
        public FlowApiSendEnvelopeRecipient(string firstName, string lastName, string languageCode, string email = default(string), string emailBodyExtra = default(string), bool? disableEmail = default(bool?), bool? addAndroidAppLink = default(bool?), bool? addIosAppLink = default(bool?), bool? addWindowsAppLink = default(bool?), bool? allowDelegation = default(bool?), bool? skipExternalDataValidation = default(bool?), IList<FlowApiSendEnvelopeAuthentication> authenticationMethods = default(IList<FlowApiSendEnvelopeAuthentication>), FlowApiDisposableCertificateData disposableCertificateData = default(FlowApiDisposableCertificateData), FlowApiRemoteCertificateData remoteCertificateData = default(FlowApiRemoteCertificateData), FlowApiOtpData otpData = default(FlowApiOtpData), FlowApiPkcs7SignerData pkcs7SignerData = default(FlowApiPkcs7SignerData))
        {
            Email = email;
            FirstName = firstName;
            LastName = lastName;
            LanguageCode = languageCode;
            EmailBodyExtra = emailBodyExtra;
            DisableEmail = disableEmail;
            AddAndroidAppLink = addAndroidAppLink;
            AddIosAppLink = addIosAppLink;
            AddWindowsAppLink = addWindowsAppLink;
            AllowDelegation = allowDelegation;
            SkipExternalDataValidation = skipExternalDataValidation;
            AuthenticationMethods = authenticationMethods;
            DisposableCertificateData = disposableCertificateData;
            RemoteCertificateData = remoteCertificateData;
            OtpData = otpData;
            Pkcs7SignerData = pkcs7SignerData;
        }

        /// <summary>
        /// The email address of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// The language code of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "LanguageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Additional email body for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "EmailBodyExtra")]
        public string EmailBodyExtra { get; set; }

        /// <summary>
        /// Specifies if an email should be sent out for this recipient.
        /// </summary>
        [JsonProperty(PropertyName = "DisableEmail")]
        public bool? DisableEmail { get; set; }

        /// <summary>
        /// If true, an Android app link is added to the email message.
        /// </summary>
        [JsonProperty(PropertyName = "AddAndroidAppLink")]
        public bool? AddAndroidAppLink { get; set; }

        /// <summary>
        /// If true, an iOS app link is added to the email message.
        /// </summary>
        [JsonProperty(PropertyName = "AddIosAppLink")]
        public bool? AddIosAppLink { get; set; }

        /// <summary>
        /// If true, an Windows app link is added to the email message.
        /// </summary>
        [JsonProperty(PropertyName = "AddWindowsAppLink")]
        public bool? AddWindowsAppLink { get; set; }

        /// <summary>
        /// If true, delegation is allowed for this recipient.
        /// </summary>
        [JsonProperty(PropertyName = "AllowDelegation")]
        public bool? AllowDelegation { get; set; }

        /// <summary>
        /// IF true, external validation for this recipient is skipped.
        /// </summary>
        [JsonProperty(PropertyName = "SkipExternalDataValidation")]
        public bool? SkipExternalDataValidation { get; set; }

        /// <summary>
        /// A list of authentications which are available for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "AuthenticationMethods")]
        public IList<FlowApiSendEnvelopeAuthentication> AuthenticationMethods { get; set; }

        /// <summary>
        /// The disposable certificate data for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "DisposableCertificateData")]
        public FlowApiDisposableCertificateData DisposableCertificateData { get; set; }

        /// <summary>
        /// The remote certificate data for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "RemoteCertificateData")]
        public FlowApiRemoteCertificateData RemoteCertificateData { get; set; }

        /// <summary>
        /// The one time pad data for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "OtpData")]
        public FlowApiOtpData OtpData { get; set; }

        /// <summary>
        /// The PKCS7 data for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "Pkcs7SignerData")]
        public FlowApiPkcs7SignerData Pkcs7SignerData { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
            if (LanguageCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LanguageCode");
            }
        }
    }
}
