// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A representation of a team in eSignAnyWhere.
    /// </summary>
    public partial class FlowApiTeam
    {
        /// <summary>
        /// Initializes a new instance of the FlowApiTeam class.
        /// </summary>
        public FlowApiTeam() { }

        /// <summary>
        /// Initializes a new instance of the FlowApiTeam class.
        /// </summary>
        public FlowApiTeam(string name, bool? allowEnvelopeSharingWithinTeam = default(bool?), bool? allowTemplateSharingWithinTeam = default(bool?), FlowApiTeamMember head = default(FlowApiTeamMember))
        {
            Name = name;
            AllowEnvelopeSharingWithinTeam = allowEnvelopeSharingWithinTeam;
            AllowTemplateSharingWithinTeam = allowTemplateSharingWithinTeam;
            Head = head;
        }

        /// <summary>
        /// The name of the team.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if envelopes are shared among members of this team.
        /// </summary>
        [JsonProperty(PropertyName = "AllowEnvelopeSharingWithinTeam")]
        public bool? AllowEnvelopeSharingWithinTeam { get; set; }

        /// <summary>
        /// Indicates if templates are shared among members of this team.
        /// </summary>
        [JsonProperty(PropertyName = "AllowTemplateSharingWithinTeam")]
        public bool? AllowTemplateSharingWithinTeam { get; set; }

        /// <summary>
        /// The team leader.
        /// </summary>
        [JsonProperty(PropertyName = "Head")]
        public FlowApiTeamMember Head { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
