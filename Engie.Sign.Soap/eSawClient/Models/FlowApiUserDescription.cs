// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class FlowApiUserDescription
    {
        /// <summary>
        /// Initializes a new instance of the FlowApiUserDescription class.
        /// </summary>
        public FlowApiUserDescription() { }

        /// <summary>
        /// Initializes a new instance of the FlowApiUserDescription class.
        /// </summary>
        public FlowApiUserDescription(string email, string firstName, string lastName, string userName = default(string), string sid = default(string), string jobTitle = default(string), string phoneNumber = default(string), string role = default(string), bool? isUserManager = default(bool?), string defaultSubject = default(string), string defaultMessage = default(string), bool? notifyRecipientOnActionNeeded = default(bool?), bool? notifySenderCompleteEnvelope = default(bool?), bool? notifySenderDeclined = default(bool?), bool? notifySenderDeliveryFailed = default(bool?), bool? notifySenderViewed = default(bool?), byte[] signatureImage = default(byte[]), IList<FlowApiUserAuthentication> authentications = default(IList<FlowApiUserAuthentication>))
        {
            Email = email;
            FirstName = firstName;
            LastName = lastName;
            UserName = userName;
            Sid = sid;
            JobTitle = jobTitle;
            PhoneNumber = phoneNumber;
            Role = role;
            IsUserManager = isUserManager;
            DefaultSubject = defaultSubject;
            DefaultMessage = defaultMessage;
            NotifyRecipientOnActionNeeded = notifyRecipientOnActionNeeded;
            NotifySenderCompleteEnvelope = notifySenderCompleteEnvelope;
            NotifySenderDeclined = notifySenderDeclined;
            NotifySenderDeliveryFailed = notifySenderDeliveryFailed;
            NotifySenderViewed = notifySenderViewed;
            SignatureImage = signatureImage;
            Authentications = authentications;
        }

        /// <summary>
        /// The email address of the User.
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// username of the user (used for usersynchronisation and alternative
        /// logins)
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// sid of the user (used for usersynchronisation and alternative
        /// logins)
        /// </summary>
        [JsonProperty(PropertyName = "Sid")]
        public string Sid { get; set; }

        /// <summary>
        /// The job title of the user.
        /// </summary>
        [JsonProperty(PropertyName = "JobTitle")]
        public string JobTitle { get; set; }

        /// <summary>
        /// The phone number of the user.
        /// </summary>
        [JsonProperty(PropertyName = "PhoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The role of the user, which defines its permissions. Possible
        /// values include: 'None', 'PowerUser', 'RegisteredSigner'
        /// </summary>
        [JsonProperty(PropertyName = "Role")]
        public string Role { get; set; }

        /// <summary>
        /// Defines if the user can manage other users (add/delete/modify).
        /// </summary>
        [JsonProperty(PropertyName = "IsUserManager")]
        public bool? IsUserManager { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultSubject")]
        public string DefaultSubject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultMessage")]
        public string DefaultMessage { get; set; }

        /// <summary>
        /// Defines if the user gets an email notification every time if his
        /// actions are needed for an envelope.
        /// </summary>
        [JsonProperty(PropertyName = "NotifyRecipientOnActionNeeded")]
        public bool? NotifyRecipientOnActionNeeded { get; set; }

        /// <summary>
        /// Defines if the user gets an email notification when a dedicated
        /// envelope is finished.
        /// </summary>
        [JsonProperty(PropertyName = "NotifySenderCompleteEnvelope")]
        public bool? NotifySenderCompleteEnvelope { get; set; }

        /// <summary>
        /// Defines if the user gets an email notification when a recipient
        /// rejected an envelope.
        /// </summary>
        [JsonProperty(PropertyName = "NotifySenderDeclined")]
        public bool? NotifySenderDeclined { get; set; }

        /// <summary>
        /// Sends an email to the user when the delivery of the envelope
        /// failed.
        /// </summary>
        [JsonProperty(PropertyName = "NotifySenderDeliveryFailed")]
        public bool? NotifySenderDeliveryFailed { get; set; }

        /// <summary>
        /// Sends an email when a recipient viewed an envelope of the user.
        /// </summary>
        [JsonProperty(PropertyName = "NotifySenderViewed")]
        public bool? NotifySenderViewed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SignatureImage")]
        public byte[] SignatureImage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Authentications")]
        public IList<FlowApiUserAuthentication> Authentications { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
        }
    }
}
