// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class FlowApiSendEnvelopeDescription
    {
        /// <summary>
        /// Initializes a new instance of the FlowApiSendEnvelopeDescription
        /// class.
        /// </summary>
        public FlowApiSendEnvelopeDescription() { }

        /// <summary>
        /// Initializes a new instance of the FlowApiSendEnvelopeDescription
        /// class.
        /// </summary>
        public FlowApiSendEnvelopeDescription(string name, string emailSubject, string emailBody, bool enableReminders, int firstReminderDayAmount, int recurrentReminderDayAmount, int beforeExpirationDayAmount, int daysUntilExpire, IList<FlowApiSendEnvelopeStep> steps, string displayedEmailSender = default(string), string callbackUrl = default(string), string statusUpdateCallbackUrl = default(string), WorkstepEventCallback workstepEventCallback = default(WorkstepEventCallback), FlowApiAddFormFields addFormFields = default(FlowApiAddFormFields), FlowApiOverrideFormFieldOptions overrideFormFieldValues = default(FlowApiOverrideFormFieldOptions), string metaDataXml = default(string))
        {
            Name = name;
            EmailSubject = emailSubject;
            EmailBody = emailBody;
            DisplayedEmailSender = displayedEmailSender;
            EnableReminders = enableReminders;
            FirstReminderDayAmount = firstReminderDayAmount;
            RecurrentReminderDayAmount = recurrentReminderDayAmount;
            BeforeExpirationDayAmount = beforeExpirationDayAmount;
            DaysUntilExpire = daysUntilExpire;
            CallbackUrl = callbackUrl;
            StatusUpdateCallbackUrl = statusUpdateCallbackUrl;
            WorkstepEventCallback = workstepEventCallback;
            Steps = steps;
            AddFormFields = addFormFields;
            OverrideFormFieldValues = overrideFormFieldValues;
            MetaDataXml = metaDataXml;
        }

        /// <summary>
        /// The name of the envelope.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// The subject of the sent out emails.
        /// </summary>
        [JsonProperty(PropertyName = "EmailSubject")]
        public string EmailSubject { get; set; }

        /// <summary>
        /// The body of the sent out emails.
        /// </summary>
        [JsonProperty(PropertyName = "EmailBody")]
        public string EmailBody { get; set; }

        /// <summary>
        /// The name of the email sender.
        /// </summary>
        [JsonProperty(PropertyName = "DisplayedEmailSender")]
        public string DisplayedEmailSender { get; set; }

        /// <summary>
        /// If true, reminders are used.
        /// </summary>
        [JsonProperty(PropertyName = "EnableReminders")]
        public bool EnableReminders { get; set; }

        /// <summary>
        /// Amount of days until the first reminder is sent out.
        /// </summary>
        [JsonProperty(PropertyName = "FirstReminderDayAmount")]
        public int FirstReminderDayAmount { get; set; }

        /// <summary>
        /// Amount of days until all recurrent reminders are sent out.
        /// </summary>
        [JsonProperty(PropertyName = "RecurrentReminderDayAmount")]
        public int RecurrentReminderDayAmount { get; set; }

        /// <summary>
        /// Amount of days until a reminder about the expiration is sent out.
        /// </summary>
        [JsonProperty(PropertyName = "BeforeExpirationDayAmount")]
        public int BeforeExpirationDayAmount { get; set; }

        /// <summary>
        /// Amount of days until the envelope expires.
        /// </summary>
        [JsonProperty(PropertyName = "DaysUntilExpire")]
        public int DaysUntilExpire { get; set; }

        /// <summary>
        /// The callback url of the envelope.
        /// </summary>
        [JsonProperty(PropertyName = "CallbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// The callback url of status changes for the envelope.
        /// </summary>
        [JsonProperty(PropertyName = "StatusUpdateCallbackUrl")]
        public string StatusUpdateCallbackUrl { get; set; }

        /// <summary>
        /// Workstep event callback options.
        /// </summary>
        [JsonProperty(PropertyName = "WorkstepEventCallback")]
        public WorkstepEventCallback WorkstepEventCallback { get; set; }

        /// <summary>
        /// The steps for the envelope.
        /// </summary>
        [JsonProperty(PropertyName = "Steps")]
        public IList<FlowApiSendEnvelopeStep> Steps { get; set; }

        /// <summary>
        /// Added form fields.
        /// </summary>
        [JsonProperty(PropertyName = "AddFormFields")]
        public FlowApiAddFormFields AddFormFields { get; set; }

        /// <summary>
        /// Form field descriptions which should be filled.
        /// </summary>
        [JsonProperty(PropertyName = "OverrideFormFieldValues")]
        public FlowApiOverrideFormFieldOptions OverrideFormFieldValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetaDataXml")]
        public string MetaDataXml { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (EmailSubject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmailSubject");
            }
            if (EmailBody == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmailBody");
            }
            if (Steps == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Steps");
            }
            if (this.Steps != null)
            {
                foreach (var element in this.Steps)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
