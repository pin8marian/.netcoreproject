// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A represenation of a recipient for the current status of an envelope.
    /// </summary>
    public partial class FlowApiEnvelopeStatusRecipient
    {
        /// <summary>
        /// Initializes a new instance of the FlowApiEnvelopeStatusRecipient
        /// class.
        /// </summary>
        public FlowApiEnvelopeStatusRecipient() { }

        /// <summary>
        /// Initializes a new instance of the FlowApiEnvelopeStatusRecipient
        /// class.
        /// </summary>
        public FlowApiEnvelopeStatusRecipient(string id = default(string), string firstName = default(string), string lastName = default(string), int? orderIndex = default(int?), string email = default(string), string languageCode = default(string), string status = default(string), string statusReason = default(string), string recipientType = default(string), DateTime? signedDate = default(DateTime?), string workstepRedirectionUrl = default(string), IList<FlowApiEnvelopeStatusWarning> warnings = default(IList<FlowApiEnvelopeStatusWarning>), IList<FlowApiSendEnvelopeAuthentication> authentication = default(IList<FlowApiSendEnvelopeAuthentication>), bool? isParallel = default(bool?))
        {
            Id = id;
            FirstName = firstName;
            LastName = lastName;
            OrderIndex = orderIndex;
            Email = email;
            LanguageCode = languageCode;
            Status = status;
            StatusReason = statusReason;
            RecipientType = recipientType;
            SignedDate = signedDate;
            WorkstepRedirectionUrl = workstepRedirectionUrl;
            Warnings = warnings;
            Authentication = authentication;
            IsParallel = isParallel;
        }

        /// <summary>
        /// The id of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// The first name of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// The order in the envelope of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "OrderIndex")]
        public int? OrderIndex { get; set; }

        /// <summary>
        /// The email address of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// The language code of the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "LanguageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// The current workstep result status of the recipient. Possible
        /// values include: 'NotSigned', 'Signed', 'Rejected', 'Delegated'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusReason")]
        public string StatusReason { get; set; }

        /// <summary>
        /// The type of the recipient. Possible values include: 'Signer',
        /// 'Cc', 'Acknowledge', 'Pkcs7Signer'
        /// </summary>
        [JsonProperty(PropertyName = "RecipientType")]
        public string RecipientType { get; set; }

        /// <summary>
        /// The date when the recipient finished its actions.
        /// </summary>
        [JsonProperty(PropertyName = "SignedDate")]
        public DateTime? SignedDate { get; set; }

        /// <summary>
        /// The url for generating a workstep for the recipient. Opens the
        /// viewer where the recipient has to perform his actions.
        /// </summary>
        [JsonProperty(PropertyName = "WorkstepRedirectionUrl")]
        public string WorkstepRedirectionUrl { get; set; }

        /// <summary>
        /// Occured warnings.
        /// </summary>
        [JsonProperty(PropertyName = "Warnings")]
        public IList<FlowApiEnvelopeStatusWarning> Warnings { get; set; }

        /// <summary>
        /// The possible authentication methods for the recipient.
        /// </summary>
        [JsonProperty(PropertyName = "Authentication")]
        public IList<FlowApiSendEnvelopeAuthentication> Authentication { get; set; }

        /// <summary>
        /// Defines if the recipient is parallel and the corresponding
        /// envelope has recipients with the same order index.
        /// </summary>
        [JsonProperty(PropertyName = "IsParallel")]
        public bool? IsParallel { get; set; }

    }
}
