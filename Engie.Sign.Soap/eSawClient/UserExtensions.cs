// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace eSaw
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for User.
    /// </summary>
    public static partial class UserExtensions
    {
            /// <summary>
            /// Creates an user in the organization of the api user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Create(this IUser operations, UserCreateModel model)
            {
                return Task.Factory.StartNew(s => ((IUser)s).CreateAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an user in the organization of the api user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this IUser operations, UserCreateModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an user from the api user's organization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user who should be deleted.
            /// </param>
            /// <param name='reassignDescriptor'>
            /// Information about the user and remaining envelopes handling.
            /// </param>
            public static object Delete(this IUser operations, string userId, FlowApiDeleteUserReassignDescriptor reassignDescriptor)
            {
                return Task.Factory.StartNew(s => ((IUser)s).DeleteAsync(userId, reassignDescriptor), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an user from the api user's organization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user who should be deleted.
            /// </param>
            /// <param name='reassignDescriptor'>
            /// Information about the user and remaining envelopes handling.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IUser operations, string userId, FlowApiDeleteUserReassignDescriptor reassignDescriptor, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(userId, reassignDescriptor, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates settings of a particular user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user who should be updated.
            /// </param>
            /// <param name='userUpdateDescription'>
            /// Information about the user to be updated
            /// </param>
            public static object Update(this IUser operations, string userId, FlowApiUserUpdateDescription userUpdateDescription)
            {
                return Task.Factory.StartNew(s => ((IUser)s).UpdateAsync(userId, userUpdateDescription), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates settings of a particular user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user who should be updated.
            /// </param>
            /// <param name='userUpdateDescription'>
            /// Information about the user to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this IUser operations, string userId, FlowApiUserUpdateDescription userUpdateDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(userId, userUpdateDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds users corresponding to the given user descriptor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='findUsersDescriptor'>
            /// The descriptor for finding users (filter).
            /// </param>
            public static object Find(this IUser operations, FlowApiFindUsersDescriptor findUsersDescriptor)
            {
                return Task.Factory.StartNew(s => ((IUser)s).FindAsync(findUsersDescriptor), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds users corresponding to the given user descriptor.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='findUsersDescriptor'>
            /// The descriptor for finding users (filter).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindAsync(this IUser operations, FlowApiFindUsersDescriptor findUsersDescriptor, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindWithHttpMessagesAsync(findUsersDescriptor, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the signature image.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user whos signature image should be replaced.
            /// </param>
            /// <param name='file'>
            /// Upload software package
            /// </param>
            public static object UploadSignatureImage(this IUser operations, string userId, System.IO.Stream file)
            {
                return Task.Factory.StartNew(s => ((IUser)s).UploadSignatureImageAsync(userId, file), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the signature image.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user whos signature image should be replaced.
            /// </param>
            /// <param name='file'>
            /// Upload software package
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadSignatureImageAsync(this IUser operations, string userId, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadSignatureImageWithHttpMessagesAsync(userId, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
